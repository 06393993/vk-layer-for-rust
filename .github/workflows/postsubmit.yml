# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# For safety reasons, we have to pin a third-party github action to a specific commit hash.
on:
  push:
    branches: ["main"]
  workflow_call: {}
name: postsubmit
jobs:
  buildtest:
    name: Rust build and test
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up PATH on Windows
        # Needed to use the GNU patch in meson instead of Strawberry Perl patch.
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "C:\Program Files\Git\usr\bin" >> $env:GITHUB_PATH
      - name: Install missing depedencis (Linux)
        run: |
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo apt install ./libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo apt-get install libdrm-dev bison byacc flex ninja-build -y
        if: runner.os == 'Linux'
      - name: install missing dependencies (Windows)
        run: choco install -y winflexbison pkgconfiglite
        if: runner.os == 'Windows'
      # Need a non-elevated user so that the Vulkan loader can pick the lavapipe ICD.
      - name: Create a new user (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: net user testuser i23456@B /add
      - name: Grant full control access to everyone for the user profile directory on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: pwsh -NonInteractive -File ./.github/scripts/windows/grant_access.ps1
      - name: Setup LLVM install path
        id: setup-llvm-install-path
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "llvm_install_path=`realpath $GITHUB_WORKSPACE/../LLVM`" >> $GITHUB_OUTPUT
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "llvm_install_path=C:/Users/Public/LLVM" >> $GITHUB_OUTPUT
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash
      # Set up LLVM.
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup-llvm-install-path.outputs.llvm_install_path }}
          key: ${{ format('llvm-18.1.8-{0}', runner.os) }}
      # Need to manually download LLVM on Windows, because the LLVM downloaded by the
      # KyleMayes/install-llvm-action action doesn't include all LLVM libraries.
      - name: Download and decompress LLVM and Clang (Windows)
        shell: pwsh
        run: |
          pwsh -NonInteractive -File ./.github/scripts/windows/download_and_decompress_llvm.ps1 `
            -LlvmInstallPath "${{steps.setup-llvm-install-path.outputs.llvm_install_path}}"
        if: runner.os == 'Windows' && !steps.cache-llvm.outputs.cache-hit
      - name: Install LLVM and Clang
        # KyleMayes/install-llvm-action@v2.0.4
        uses: KyleMayes/install-llvm-action@10c8957324ef77f0712d883b9ed08adb6da4a192
        with:
          version: "18.1.8"
          directory: ${{ steps.setup-llvm-install-path.outputs.llvm_install_path }}
          cached: ${{ runner.os == 'Windows' || steps.cache-llvm.outputs.cache-hit }}
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: runner.os == 'Windows'
      # Set up Rust.
      - name: Set up stable Rust toolchain
        # dtolnay/rust-toolchain@stable
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45
        with:
          components: clippy, llvm-tools-preview
      - name: Set up nightly Rust toolchain
        # dtolnay/rust-toolchain@nightly
        uses: dtolnay/rust-toolchain@f2f3c4b315c5bb8415dbb043af44ec90f68ae503
        with:
          components: rustfmt
      - run: rustup default stable
      # TODO: Try https://github.com/actions/cache/issues/752#issuecomment-1847036770 to improve
      # cache speed.
      - name: Set up Rust dependency cache
        # Swatinem/rust-cache@master
        uses: Swatinem/rust-cache@9bdad043e88c75890e36ad3bbc8d27f0090dd609
        with:
          key: ${{ runner.os }}
          cache-all-crates: true
      - name: Install cargo nextest
        run: cargo install cargo-nextest --locked
      - name: Install cargo-make
        run: cargo install --no-default-features --locked cargo-make
      - name: Install cargo llvm cov
        run: cargo install cargo-llvm-cov --locked
      # Set up python depdencies.
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13t"
          cache: "pipenv"
      - name: Install pipenv
        run: python -m pip install pipenv==2025.0.2
      - name: Install python dependencies
        run: pipenv install --ignore-pipfile
      - name: Install addlicense
        # TODO: try cache the go build cache to speed up go install, following
        # https://github.com/actions/setup-go/issues/483#issuecomment-2149404447
        run: go install github.com/google/addlicense@master
      - name: Cache e2e dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/e2e-deps/build
            ${{ github.workspace }}/e2e-deps/subprojects/packagecache
          key: ${{ format('e2e-deps-{0}', runner.os) }}
      - name: Run the presubmit
        run: cargo make ci-presubmit
      - name: Run the e2e-test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pwsh -NonInteractive -File ./.github/scripts/windows/run_e2e_tests.ps1 -LlvmInstallPath `
            "${{steps.setup-llvm-install-path.outputs.llvm_install_path}}"
      - name: Run the e2e-test (Linux)
        if: runner.os == 'Linux'
        run: cargo make ci-e2e-test --llvm-path "${{ steps.setup-llvm-install-path.outputs.llvm_install_path }}"
