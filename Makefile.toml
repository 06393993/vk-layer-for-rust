# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[config]
default_to_workspace = false
skip_core_tasks = true
unstable_features = ["CTRL_C_HANDLING"]

[tasks.init]
# Should not use env_scripts which will also be executed by child cargo-make tasks.
description = "Set up environements."
private = true
script = '''

set_env MY_CARGO_MAKE_DOC_ARGS ${CARGO_MAKE_TASK_ARGS}

# Check whether linters and formatters should only check or fix in place.
echo Parsing arguments...
args = split ${CARGO_MAKE_TASK_ARGS} ;

# Handle the arguments
has_check_arg = array_contains ${args} --check
has_check_arg = not equals ${has_check_arg} false
echo Check if --check is passed to the argument: ${has_check_arg}

llvm_path_index = array_contains ${args} --llvm-path
if not equals ${llvm_path_index} false
    llvm_path_index = calc ${llvm_path_index} + 1
    llvm_path = array_get ${args} ${llvm_path_index}
    if is_empty ${llvm_path}
        echo The value for the --llvm-path argument is not specified
        exit 1
    end
    echo The value for the --llvm-path argument: ${llvm_path}
    set_env MY_CARGO_MAKE_E2E_DEPS_LLVM_PATH_ARG -Dllvm:llvm-path=${llvm_path}
end

cargo_make_task = get_env CARGO_MAKE_TASK
is_ci_target = starts_with ${cargo_make_task} ci-
echo Check if the ${cargo_make_task} target is a CI target: ${is_ci_target}
if ${has_check_arg} or ${is_ci_target}
    set_env MY_CARGO_MAKE_BLACK_CHECK_ARG --check
    set_env MY_CARGO_MAKE_RUSTFMT_CHECK_ARG --check
    set_env MY_CARGO_MAKE_ADDLICENSE_CHECK_ARG -check
    set_env MY_CARGO_MAKE_CODEGEN_CHECK_ARG --check
    set_env MY_CARGO_MAKE_TAPLO_CHECK_ARG --check
    set_env MY_CARGO_MAKE_MDFORMAT_CHECK_ARG --check
    set_env MY_CARGO_MAKE_YAMLFMT_CHECK_ARGS -quiet;-lint
else
    set_env MY_CARGO_MAKE_CLIPPY_FIX_ARGS --fix;--allow-dirty;--allow-staged
    set_env MY_CARGO_MAKE_RUFF_FIX_ARG --fix
end

# For some targets, only passthrough the arguments if it's the toplevel target.
test_targets = set_new test e2e-test
is_test_toplevel_target = set_contains ${test_targets} ${cargo_make_task}
if ${is_test_toplevel_target}
    set_env MY_CARGO_MAKE_NEXTEST_USER_ARGS ${CARGO_MAKE_TASK_ARGS}
end
is_typos_toplevel_target = eq ${cargo_make_task} typos
if ${is_typos_toplevel_target}
    set_env MY_CARGO_MAKE_TYPOS_USER_ARGS ${CARGO_MAKE_TASK_ARGS}
end

# Set up envs specific to e2e tests
e2e_deps_src_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} e2e-deps
set_env MY_CARGO_MAKE_E2E_DEPS_SRC_DIR ${e2e_deps_src_dir}
e2e_deps_build_dir = join_path ${e2e_deps_src_dir} build
set_env MY_CARGO_MAKE_E2E_DEPS_BUILD_DIR ${e2e_deps_build_dir}
e2e_deps_install_prefix = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} target e2e-deps
set_env MY_CARGO_MAKE_E2E_DEPS_INSTALL_PREFIX ${e2e_deps_install_prefix}
if is_windows
    set_env MY_CARGO_MAKE_E2E_DEPS_VSENV_ARG "--vsenv"
end

# Set up envs specific to CI
if ${is_ci_target}
    # Use the ci profile for nextest
    set_env MY_CARGO_MAKE_NEXTEST_PROFILE_ARGS --profile;ci

    # Set up the -D warnings rustc flags
    rust_flags = get_env RUSTFLAGS
    if not is_empty rust_flags
        rust_flags = concat ${rust_flags} " "
    end
    rust_flags = concat ${rust_flags} "-D warnings"
    set_env RUSTFLAGS ${rust_flags}

    # Shadow arguments for certain targets.
    set_env MY_CARGO_MAKE_DOC_ARGS ""

    # Set environments used by e2e tests. We set the environment variables for all CI targets, so
    # that cargo always sees the same environements for all CI targets, and won't recompile.

    vk_driver_files = array ${e2e_deps_install_prefix} share vulkan icd.d lvp_icd.x86_64.json
    path_component_sep = set /
    if is_windows
        path_component_sep = set \\
    end
    vk_driver_files = array_join ${vk_driver_files} ${path_component_sep}
    set_env VK_DRIVER_FILES ${vk_driver_files}
    set_env VK_LOADER_LAYERS_DISABLE *MESA*,~implicit~
    set_env VK_LOADER_DEBUG all
    path = get_env PATH
    e2e_deps_bin_dir = join_path ${e2e_deps_install_prefix} bin
    path_sep = set :
    if is_windows
        path_sep = set ;
    end
    path = concat ${e2e_deps_bin_dir} ${path_sep} ${path}
    set_env PATH ${path}

    vulkaninfo_path = which vulkaninfo
    echo Using vulkaninfo: ${vulkaninfo_path}

    # Set up the path to search the dynamic libraries including the Vulkan loader on Linux.
    if not is_windows
        e2e_deps_lib_dir = join_path ${e2e_deps_install_prefix} lib
        ld_library_path = get_env LD_LIBRARY_PATH
        if not is_empty ${ld_library_path}
            ld_library_path = concat : ${ld_library_path}
        end
        ld_library_path = concat ${e2e_deps_lib_dir} ${ld_library_path}
        set_env LD_LIBRARY_PATH ${ld_library_path}
    end
end
'''
script_runner = "@duckscript"

[tasks.coverage]
args = ["llvm-cov", "nextest", "--all-features", "--all-targets", "${@}"]
category = "Development"
command = "cargo"
dependencies = ["nextest-detection"]
install_crate_args = ["--locked"]

[tasks.codegen]
# TODO: Detect if LLVM is correctly installed. If not, guide the user to install.
args = [
    "run",
    "--all-features",
    "--release",
    "-p",
    "vulkan-layer-scripts",
    "--bin",
    "codegen",
    "--",
    "@@remove-empty(MY_CARGO_MAKE_CODEGEN_CHECK_ARG)",
]
category = "Development"
command = "cargo"
description = "Runs the codegen."

[tasks.detect-addlicense]
private = true
script = '''
echo Detecting the GOPATH environment...
output = exec --fail-on-error go env GOPATH
gopath = trim ${output.stdout}
echo GOPATH=${gopath}
addlicense_file_name = set addlicense
if is_windows
    addlicense_file_name = concat ${addlicense_file_name} .exe
end
addlicense_path = join_path ${gopath} bin ${addlicense_file_name}
echo Path of addlicense is ${addlicense_path}
set_env MY_CARGO_MAKE_ADDLICENSE_PATH ${addlicense_path}
addlicense_installed = is_path_exists ${addlicense_path}
if not ${addlicense_installed}
    echo Install addlicense.
    exec --fail-on-error go install github.com/google/addlicense@master
end
'''
script_runner = "@duckscript"

[tasks.license]
# We shouldn't use the -ignore parameter, as that doesn't work on Windows:
# https://github.com/google/addlicense/pull/157.
args = [
    "run",
    "-p",
    "vulkan-layer-scripts",
    "--bin",
    "list-files",
    "--release",
    "--",
    "--use-gitignore",
    "--ignore=**/third_party",
    ".",
    "--",
    "${MY_CARGO_MAKE_ADDLICENSE_PATH}",
    "@@remove-empty(MY_CARGO_MAKE_ADDLICENSE_CHECK_ARG)",
]
category = "Format/Lint"
command = "cargo"
dependencies = ["detect-addlicense"]
description = "Add license to source files."

[tasks.rust-check]
args = ["check", "--workspace", "--all-targets", "--all-features"]
category = "Development"
command = "cargo"
description = "Runs cargo check."

[tasks.build-scripts]
args = ["build", "-p", "vulkan-layer-scripts", "--release"]
command = "cargo"
private = true

[tasks.rust-clippy]
args = [
    "clippy",
    "--workspace",
    "--all-targets",
    "--all-features",
    "@@split(MY_CARGO_MAKE_CLIPPY_FIX_ARGS,;)",
]
category = "Format/Lint"
command = "cargo"
description = "Runs cargo clippy."

[tasks.rust-fmt]
args = ["fmt", "@@remove-empty(MY_CARGO_MAKE_RUSTFMT_CHECK_ARG)"]
category = "Format/Lint"
command = "cargo"
description = "Runs cargo fmt."
toolchain = "nightly"

[tasks.rust-lint]
category = "Format/Lint"
dependencies = ["rust-fmt", "rust-check", "rust-clippy"]
description = "Lint Rust source files."

[tasks.python-ruff]
args = ["run", "ruff", "check", "@@remove-empty(MY_CARGO_MAKE_RUFF_FIX_ARG)", "."]
category = "Format/Lint"
command = "pipenv"
description = "Runs python ruff linter."
private = true

[tasks.python-black]
args = ["run", "black", "@@remove-empty(MY_CARGO_MAKE_BLACK_CHECK_ARG)", "."]
category = "Format/Lint"
command = "pipenv"
description = "Runs python black formatter."
private = true

[tasks.python-lint]
category = "Format/Lint"
dependencies = ["python-ruff", "python-black"]
description = "Lint python source files."

[tasks.toml-fmt]
args = [
    "fmt",
    "@@remove-empty(MY_CARGO_MAKE_TAPLO_FMT_CRLF_ARG)",
    "@@remove-empty(MY_CARGO_MAKE_TAPLO_CHECK_ARG)",
]
category = "Format/Lint"
command = "taplo"
description = "Format toml files."
install_crate.binary = "taplo"
install_crate.crate_name = "taplo-cli"
install_crate.test_arg = "--version"
install_crate_args = ["--locked"]

[tasks.toml-fmt.env.MY_CARGO_MAKE_TAPLO_FMT_CRLF_ARG]
condition.platforms = ["windows"]
value = "--option=crlf=true"

[tasks.typos]
args = ["@@split(MY_CARGO_MAKE_TYPOS_USER_ARGS,;)"]
category = "Format/Lint"
command = "typos"
description = "Check spelling mistakes."
install_crate.binary = "typos"
install_crate.crate_name = "typos-cli"
install_crate.test_arg = "--version"
install_crate_args = ["--locked"]

[tasks.mdformat]
args = [
    "run",
    "-p",
    "vulkan-layer-scripts",
    "--bin",
    "list-files",
    "--release",
    "--",
    "--use-gitignore",
    "--ignore=**/third_party",
    "--include=*.md",
    ".",
    "--",
    "pipenv",
    "run",
    "mdformat",
    "@@remove-empty(MY_CARGO_MAKE_MDFORMAT_CHECK_ARG)",
]
category = "Format/Lint"
command = "cargo"
description = "Format the md files."

[tasks.detect-yamlfmt]
private = true
script = '''
echo Detecting the GOPATH environment...
output = exec --fail-on-error go env GOPATH
gopath = trim ${output.stdout}
echo GOPATH=${gopath}
yamlfmt_file_name = set yamlfmt
if is_windows
    yamlfmt_file_name = concat ${yamlfmt_file_name} .exe
end
yamlfmt_path = join_path ${gopath} bin ${yamlfmt_file_name}
echo Path of yamlfmt is ${yamlfmt_path}
set_env MY_CARGO_MAKE_YAMLFMT_PATH ${yamlfmt_path}
yamlfmt_installed = is_path_exists ${yamlfmt_path}
if not ${yamlfmt_installed}
    echo Install yamlfmt.
    exec --fail-on-error go install github.com/google/yamlfmt/cmd/yamlfmt@latest
end
'''
script_runner = "@duckscript"

[tasks.yamlfmt]
args = ["@@split(MY_CARGO_MAKE_YAMLFMT_CHECK_ARGS,;)", "-dstar", "**/*.{yaml,yml}"]
category = "Format/Lint"
command = "${MY_CARGO_MAKE_YAMLFMT_PATH}"
condition.fail_message = """
on Windows, yamlfmt doesn't work well with comments in tables. See
https://github.com/google/yamlfmt/issues/192 for details."""
condition.platforms = ["linux"]
dependencies = ["detect-yamlfmt"]
description = "Format YAML files."

[tasks.lint]
# No need to run lint tasks in parallel as the overhead of fork in cargo-make is significant. In the
# IDX environment, with everything cached running in parallel takes 15s, while without parallel, it
# takes less than 10s.
category = "Format/Lint"
dependencies = ["license", "toml-fmt"]
description = "Lint all source files."
# TODO: !!! add powershell linter and format
run_task.name = ["rust-lint", "build-scripts", "python-lint", "mdformat", "yamlfmt"]

[tasks.nextest-detection]
args = ["nextest", "--version"]
command = "cargo"
install_crate_args = ["--locked"]
private = true

[tasks.python-test]
args = ["-m", "unittest", "discover", "-p", "*.py"]
category = "Development"
command = "python"
description = "Runs python tests."

[tasks.rust-test]
args = [
    "nextest",
    "run",
    "--workspace",
    "--all-targets",
    "--all-features",
    "@@split(MY_CARGO_MAKE_NEXTEST_PROFILE_ARGS,;)",
    "@@split(MY_CARGO_MAKE_NEXTEST_USER_ARGS,;)",
]
category = "Development"
command = "cargo"
dependencies = ["nextest-detection"]
description = "Runs cargo nextest."

[tasks.test]
category = "Development"
dependencies = ["rust-test", "python-test"]
description = "Runs tests."

[tasks.doctest]
args = ["+nightly", "test", "--doc", "--all-features", "--workspace", "--", "--show-output"]
category = "Development"
command = "cargo"
description = "Runs Rust doc test."
install_crate = false

[tasks.doc]
args = [
    "+nightly",
    "doc",
    "--workspace",
    "--all-features",
    "--no-deps",
    "@@split(MY_CARGO_MAKE_DOC_ARGS,;)",
]

category = "Development"
command = "cargo"
description = "Generates Rust doc."
install_crate = false

[tasks.install-rust-src-nightly]
install_crate = { rustup_component_name = "rust-src" }
private = true
toolchain = "nightly"

[tasks.miri]
args = [
    "miri",
    "nextest",
    "run",
    "--all-targets",
    "--all-features",
    "--no-fail-fast",
    "--failure-output",
    "immediate-final",
    "${@}",
]
category = "Development"
command = "cargo"
dependencies = ["nextest-detection", "install-rust-src-nightly"]
description = "Runs tests with miri."
env = { MIRIFLAGS = "-Zmiri-tree-borrows" }
install_crate.binary = "cargo"
install_crate.rustup_component_name = "miri"
install_crate.test_arg = ["miri", "--version"]
toolchain = "nightly"

[tasks.ci-coverage-lcov-info]
args = [
    "llvm-cov",
    "nextest",
    "--all-features",
    "--all-targets",
    "--lcov",
    "--output-path",
    "target/lcov.info",
]
category = "CI"
command = "cargo"
dependencies = ["nextest-detection"]
description = "Runs code coverage and generate the lcov.info output."
install_crate_args = ["--locked"]

[tasks.ci-coverage-html]
args = ["llvm-cov", "nextest", "--html", "--all-features", "--all-targets"]
category = "CI"
command = "cargo"
dependencies = ["nextest-detection"]
description = "Runs code coverage and generate the HTML output."
install_crate_args = ["--locked"]

[tasks.ci-coverage-summary-json]
args = [
    "llvm-cov",
    "nextest",
    "--all-features",
    "--all-targets",
    "--json",
    "--summary-only",
    "--output-path",
    "target/coverage.json",
]
category = "CI"
command = "cargo"
dependencies = ["nextest-detection"]
description = "Runs code coverage and generate the JSON summary."
install_crate_args = ["--locked"]

[tasks.ci-coverage-badge]
args = [
    "run",
    "--all-features",
    "--release",
    "-p",
    "vulkan-layer-scripts",
    "--bin",
    "ci",
    "--",
    "--label",
    "${MY_CARGO_MAKE_COVERAGE_BADGE_LABEL}",
    "--output-path",
    "target/coverage_badge.json",
    "target/coverage.json",
]
category = "CI"
command = "cargo"
dependencies = ["ci-coverage-summary-json"]
description = "Generate the code coverage badge."

[tasks.ci-coverage-badge.env.MY_CARGO_MAKE_COVERAGE_BADGE_LABEL]
default_value = "Unknown coverage"
mapping.linux = "Linux coverage"
mapping.windows = "Windows coverage"
source = "${CARGO_MAKE_RUST_TARGET_OS}"

[tasks.ci-coverage]
# Must run the HTML coverage last. Otherwise other commands can clear this directory.
run_task.name = ["ci-coverage-badge", "ci-coverage-lcov-info", "ci-coverage-html"]

[tasks.buildtest]
category = "Development"
description = "Build the project and tests. Pass --check to avoid linter to modify files."
# cargo-make with fork = true will change some important environments compared with fork = false,
# and can trigger a re-compile, so we always use fork = true when compiling.
run_task = { name = ["typos", "lint", "test", "doctest"], fork = true }

[tasks.ci-buildtest]
category = "CI"
description = "Build the project and tests with the CI configuration."
run_task.name = ["buildtest"]

[tasks.ci-presubmit]
category = "CI"
description = "Runs the CI presubmit check."
run_task.fork = true
# e2e test is a separate step, as we may need to run it under a separate not elevated user.
run_task.name = ["ci-buildtest", "ci-coverage", "codegen", "doc"]
run_task.parallel = true

[tasks.e2e-test]
args = [
    "nextest",
    "run",
    "--workspace",
    "--all-targets",
    "--all-features",
    "--ignore-default-filter",
    "-E",
    "package(e2e-test)",
    "@@split(MY_CARGO_MAKE_NEXTEST_PROFILE_ARGS,;)",
    "@@split(MY_CARGO_MAKE_NEXTEST_USER_ARGS,;)",
]
category = "Development"
command = "cargo"
description = "Runs the e2e test."

[tasks.ci-e2e-test]
category = "CI"
dependencies = ["ci-build-and-install-e2e-deps"]
description = "Run the e2e tests with the CI configuration."
run_task.fork = true
run_task.name = ["e2e-test"]


[tasks.config-e2e-deps]
args = [
    "run",
    "meson",
    "setup",
    "@@remove-empty(MY_CARGO_MAKE_E2E_DEPS_VSENV_ARG)",
    "${MY_CARGO_MAKE_E2E_DEPS_BUILD_DIR}",
    "${MY_CARGO_MAKE_E2E_DEPS_SRC_DIR}",
    "-Dprefix=${MY_CARGO_MAKE_E2E_DEPS_INSTALL_PREFIX}",
    "@@remove-empty(MY_CARGO_MAKE_E2E_DEPS_LLVM_PATH_ARG)",
    "--backend=ninja",
    "--reconfigure",
]
command = "pipenv"
private = true

[tasks.compile-e2e-deps]
args = ["run", "meson", "compile", "-C", "${MY_CARGO_MAKE_E2E_DEPS_BUILD_DIR}"]
command = "pipenv"
private = true

[tasks.install-e2e-deps]
args = ["run", "meson", "install", "-C", "${MY_CARGO_MAKE_E2E_DEPS_BUILD_DIR}"]
command = "pipenv"
private = true

[tasks.ci-build-and-install-e2e-deps]
category = "CI"
description = "Build and install e2e dependencies."
run_task = [{ name = ["config-e2e-deps", "compile-e2e-deps", "install-e2e-deps"] }]
